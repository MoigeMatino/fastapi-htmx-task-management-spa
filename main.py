from contextlib import asynccontextmanager
from typing import Annotated, Union
from uuid import uuid4

from fastapi import Depends, FastAPI, Form, Header, Request
from fastapi.encoders import jsonable_encoder
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from sqlmodel import Session, select

from database.db import get_session, init_db
from models import TodoCreate


@asynccontextmanager
async def lifespan(app: FastAPI):
    init_db()
    yield


app = FastAPI(lifespan=lifespan)
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")


# create in-memory Todo model; usecase for dataclass
class Todo:
    def __init__(self, title):
        self.id = uuid4()
        self.title = title
        self.done = False


todos = []


@app.get("/", response_class=HTMLResponse)
def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@app.get("/todos", response_class=HTMLResponse)
async def list_todos(
    request: Request,
    hx_request: Annotated[Union[str, None], Header()] = None,
    session: Session = Depends(get_session),
):
    statement = select(Todo)
    todos = session.exec(statement).all()
    if hx_request:
        return templates.TemplateResponse(
            request=request, name="todos.html", context={"todos": todos}
        )
    return JSONResponse(content=jsonable_encoder(todos))


@app.post("/todos", response_class=HTMLResponse)
async def create_todo(
    request: Request,
    title: Annotated[str, Form()],  # form parsing
    session: Session = Depends(get_session),
):
    # Parse form data into `TodoCreate` data model for validation
    todo_data = TodoCreate(title=title)
    # Create an instance of `Todo` from the validated `TodoCreate` data
    todo = Todo(todo_data.model_validate(todo_data))

    try:
        # Add the `Todo` instance to the database
        session.add(todo)
        session.commit()

        # to ensure object has latest information from autogenerated id field
        session.refresh(todo)
    except Exception as e:
        # Handle the exception
        session.rollback()
        raise e

    # Fetch the updated list of todos
    todos = session.exec(select(Todo)).all()
    return templates.TemplateResponse(
        request=request, name="todos.html", context={"todos": todos}
    )


@app.put("/todos/{todo_id}", response_class=HTMLResponse)
async def update_todo(
    request: Request,
    todo_id: str,
    title: Annotated[str, Form()],
    session: Session = Depends(get_session),
):
    # Query the todo item by ID
    todo = session.exec(select(Todo).where(Todo.id == todo_id)).first()
    if not todo:
        return JSONResponse(content={"error": "Todo not found"}, status_code=404)

    # Update the title
    todo.title = title

    # Commit changes
    session.add(todo)
    session.commit()
    session.refresh(todo)

    # Fetch the updated list of todos
    todos = session.exec(select(Todo)).all()
    # Render the updated list of todos
    return templates.TemplateResponse(
        request=request, name="todos.html", context={"todos": todos}
    )


@app.post("/todos/{todo_id}/toggle", response_class=HTMLResponse)
async def toggle_todo(request: Request, todo_id: str):
    for index, todo in enumerate(todos):
        if str(todo.id) == todo_id:
            todos[index].done = not todos[index].done
            break
    return templates.TemplateResponse(
        request=request, name="todos.html", context={"todos": todos}
    )


@app.delete("/todos/{todo_id}/delete", response_class=HTMLResponse)
async def delete_todo(request: Request, todo_id: str):
    for index, todo in enumerate(todos):
        if str(todo.id) == todo_id:
            del todos[index]
            break
    return templates.TemplateResponse(
        request=request, name="todos.html", context={"todos": todos}
    )
