from fastapi import HTTPException, status
from sqlmodel import Session, select

from app.models.todo import Todo, TodoCreate


def db_get_user_todos(session: Session, user_id: str):
    statement = select(Todo).where(Todo.user_id == user_id)
    todos = session.exec(statement).all()
    return todos


def db_create_todo(session: Session, todo_data: TodoCreate, user_id: str):
    todo = Todo(title=todo_data.title, user_id=user_id)
    try:
        # Add the `Todo` instance to the database
        session.add(todo)
        session.commit()

        # to ensure object has latest information from autogenerated id field
        session.refresh(todo)
        return todo

    except Exception as e:
        # Handle the exception
        session.rollback()
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Error creating todo: {str(e)}",
        )


def db_update_todo(session: Session, todo_id: str, title: str):
    statement = select(Todo).where(Todo.id == todo_id)
    todo = session.exec(statement).first()
    if not todo:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Todo not found"
        )
    todo.title = title
    session.add(todo)
    session.commit()
    session.refresh(todo)
    return todo


def db_toggle_todo(session: Session, todo_id: str):
    statement = select(Todo).where(Todo.id == todo_id)
    todo = session.exec(statement).first()

    if not todo:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Todo not found"
        )

    # Toggle the done status
    todo.done = not todo.done

    # Commit changes
    session.add(todo)
    session.commit()
    session.refresh(todo)

    return todo


def db_delete_todo(session: Session, todo_id: str):
    statement = select(Todo).where(Todo.id == todo_id)
    todo = session.exec(statement).one_or_none()
    if not todo:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Todo not found"
        )
    session.delete(todo)
    session.commit()
    return todo
